#!/usr/bin/perl

if($ARGV[0] =~ /-h/){
    print "
Recursively find all subdirectories that are Git repositories
and execute the Git command passed in the arguments.
The verbose output from Git status is suppressed unless the -v swich is used.

Usage:
  gitall [-h] [-v] GITCOMMAND
-h           print this help message
-v           provide verbose information for the status command
GITCOMMAND   any Git command

Examples:

Pull remote version into all Git subdirectories
    gitall pull

Show verbose status of all Git subdirectories
    gitall -v status
";
    exit 0;
}

use strict;

my $gitcmd;                # The variable to receive the git command
my $verbose=0;

$gitcmd = join(' ',@ARGV);


if($gitcmd){
    $verbose = 1 if $gitcmd =~ s/-v//;

    my $pwd = `pwd`; chop($pwd);
    &execute_gitall($pwd);
}

sub execute_gitall(){
   my($dir) = @_;
   opendir(my $DIR,"$dir") or die "gitall can't open directory $dir\n";
   my @gits= grep { /^.git$/ } readdir($DIR);
   closedir($DIR);
   opendir(my $DIR,"$dir") or die "gitall can't open directory $dir\n";
   my @subdirs = grep { /^[^.]/  && -d "$dir/$_"} readdir($DIR);
   closedir($DIR);
   push @subdirs,@gits;

   my $subdir;
   foreach $subdir (@subdirs){
       if ($subdir eq ".git"){
           my $result = `cd $dir; git $gitcmd`;
	   # remove verbose info
	   if(not $verbose){
	       $result =~ s/On branch master//;
	       $result =~ s/Your branch is up.to.date with .origin\/master.+//;
	       $result =~ s/nothing to commit, working tree clean//;
	       $result =~ s/^\s*$//g;
	   }
           print "=========== $dir:\n $result \n" if $result;

       }else{
           &execute_gitall("$dir/$subdir");
       }
   }
}






